// main.js

require('dotenv').config();
const express = require('express');
const { MongoClient, ServerApiVersion } = require('mongodb');
const { LineClient } = require('messaging-api-line');
const cron = require('node-cron');
const { Configuration, OpenAIApi } = require('openai');

const app = express();
const uri = process.env.MONGODB_URI;
const client = new LineClient({
    accessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.LINE_CHANNEL_SECRET,
});

const OWNER_USER_ID = process.env.OWNER_USER_ID; // 管理者のLINE User ID

// MongoDBクライアント
const mongoClient = new MongoClient(uri, {
    serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
    }
});

let db;

async function connectToMongoDB() {
    if (db) {
        return db;
    }
    try {
        await mongoClient.connect();
        db = mongoClient.db("kokoro_chan");
        console.log("MongoDBに接続しました！");
        return db;
    } catch (error) {
        console.error("MongoDB接続エラー:", error);
        process.exit(1); // 接続失敗時はアプリケーションを終了
    }
}

// OpenAI API設定
const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// 不適切ワードリスト (例: 罵倒、差別、性的な表現など)
const inappropriateWords = [
    "死ね", "殺す", "きもい", "うざい", "バカ", "アホ", "クソ", "カス", "ブス", "デブ",
    "キチガイ", "ガイジ", "チョン", "Fワード", "Sワード", "ファック", "シット", "レイプ",
    "売春", "買春", "セックス", "エロ", "裸", "ポルノ", "児童ポルノ", "わいせつ",
    "死んで", "消えろ", "役立たず", "ゴキブリ", "クズ", "精神病", "馬鹿", "阿呆",
    "差別", "虐待", "暴力", "犯罪", "違法", "麻薬", "銃", "テロ", "爆弾", "自殺",
    "殺害", "障害者", "池沼", "狂ってる", "異常者", "狂人", "精神科", "精神病院",
    "キモい", "うぜえ", "うぜぇ", "ふざけるな", "くたばれ", "ぶっ殺す", "呪う",
    "カス野郎", "死ねよ", "ゴミ", "役立たず", "売女", "淫売", "ホモ", "レズ", "障害",
    "アスペ", "発達障害", "性病", "チンコ", "マンコ", "オマンコ", "パイパン", "ちんこ", "まんこ", "おまんこ",
    "コンドーム", "避妊具", "射精", "オナニー", "マスターベーション", "自慰",
    "痴漢", "盗撮", "強姦", "売春婦", "風俗", "ソープ", "ヘルス", "デリヘル", "オカマ",
    "ニグロ", "クロンボ", "チョンコ", "穢多", "非人", "土人", "猿", "ブタ", "犬",
    "乞食", "汚い", "臭い", "気持ち悪い", "吐き気がする", "醜い", "不細工", "デブス",
    "レイシスト", "セクシスト", "ホモフォビア", "トランスフォビア", "差別主義者",
    "暴力団", "ヤクザ", "ギャング", "反社会勢力", "反社", "組", "組長", "鉄砲玉",
    "シャブ", "覚醒剤", "大麻", "コカイン", "ヘロイン", "違法ドラッグ", "薬物", "乱用",
    "自傷行為", "リストカット", "オーバードーズ", "OD", "自殺幇助", "心中",
    "鬱陶しい", "だるい", "キモ", "ウザ", "はげ", "ハゲ", "禿", "デブ", "くそったれ",
    "シネ", "コロス", "バカヤロウ", "アホンダラ", "低脳", "愚か", "愚か者",
    "殺すぞ", "ぶっ殺すぞ", "死ねばいい", "消え失せろ", "生きる価値なし", "無価値",
    "害悪", "疫病神", "疫病", "ゴミクズ", "汚物", "糞", "排泄物", "ゲロ", "吐瀉物",
    "性的", "裸体", "局部", "陰部", "勃起", "性交", "オーラル", "フェラ", "クンニ", "アナル",
    "肛門", "膣", "陰茎", "陰核", "ペニス", "クリトリス", "ヴァギナ",
    "風俗店", "ソープランド", "デリバリーヘルス", "出会い系", "援助交際", "パパ活", "ママ活",
    "売春斡旋", "人身売買", "誘拐", "拉致", "監禁", "脅迫", "恐喝", "詐欺", "強盗",
    "放火", "窃盗", "違法薬物", "銃器", "違法ダウンロード", "海賊版", "著作権侵害",
    "人権侵害", "ハラスメント", "セクハラ", "パワハラ", "モラハラ", "アカハラ",
    "ヘイトスピーチ", "ヘイト", "差別発言", "排斥", "排除", "異物", "異端",
    "カルト", "過激派", "過激思想", "テロ組織", "暴力集団",
    "メンヘラ", "ヤンデレ", "病んでる", "精神的に不安定", "精神的に弱い", "精神が弱い",
    "クソ野郎", "ボケ", "ボケカス", "ド阿呆", "脳タリン", "ウスノロ", "役立たずのクソ",
    "死んでしまえ", "地獄に落ちろ", "くそったれが", "糞野郎", "汚物め", "腐った",
    "くさい", "きもい", "気持ちわりい", "きしょい", "ブサイク", "醜い顔",
    "売春行為", "売春宿", "売春婦", "ホスト", "ホストクラブ", "キャバクラ", "キャバ嬢",
    "AV", "アダルトビデオ", "ヌード", "わいせつ物", "公然わいせつ", "痴漢行為",
    "児童買春", "児童虐待", "ネグレクト", "ドメスティックバイオレンス", "DV",
    "カツアゲ", "たかり", "ゆすり", "詐欺師", "詐欺行為", "振り込め詐欺", "オレオレ詐欺",
    "闇バイト", "裏バイト", "脱法ハーブ", "合法ドラッグ", "脱法ドラッグ",
    "集団自殺", "飛び降り", "飛び込み", "首吊り", "練炭", "練炭自殺", "青酸カリ", "毒",
    "うつ病", "統合失調症", "ADHD", "ASD", "アスペルガー", "自閉症", "精神疾患",
    "精神科医", "カウンセリング", "カウンセラー", "治療", "投薬", "入院",
    "不眠症", "摂食障害", "過食症", "拒食症", "OD", "オーバードーズ",
    "いじめ", "嫌がらせ", "ストーカー", "つきまとい", "嫌がらせ行為", "粘着",
    "脅す", "脅迫する", "恐喝する", "暴力を振るう", "殴る", "蹴る", "刺す", "撃つ",
    "切り裂く", "破壊する", "燃やす", "盗む", "騙す", "誘拐する", "監禁する",
    "差別する", "見下す", "侮辱する", "罵倒する", "中傷する", "貶める", "疎外する",
    "狂ってる", "頭がおかしい", "頭がおかしい人", "頭がおかしいやつ", "精神異常",
    "売春あっせん", "風俗あっせん", "性奴隷", "人身売買", "児童売買",
    "闇社会", "半グレ", "不良グループ", "暴走族", "ギャング",
    "違法行為", "非合法", "犯罪行為", "反社会的", "反社会勢力", "犯罪組織",
    "自爆", "特攻", "無理心中", "巻き添え", "道連れ",
    "精神科病院", "閉鎖病棟", "隔離", "拘束", "措置入院", "医療保護入院",
    "セクシャルハラスメント", "パワーハラスメント", "モラルハラスメント",
    "アカデミックハラスメント", "マタニティハラスメント", "パタニティハラスメント",
    "リモートハラスメント", "テクニカルハラスメント", "ソーシャルハラスメント",
    "ブラック企業", "パワハラ上司", "モラハラ上司", "劣悪な環境", "過労死", "残業地獄",
    "パワハラ被害", "モラハラ被害", "いじめ被害", "嫌がらせ被害", "ストーカー被害",
    "詐欺被害", "犯罪被害", "精神的苦痛", "精神的ダメージ", "精神的ショック",
    "死にたい", "消えたい", "生きてる意味ない", "もうだめだ", "終わりにしたい",
    "辛い", "苦しい", "悲しい", "寂しい", "助けて", "しんどい", "疲れた", "絶望",
    "希望がない", "一人ぼっち", "誰か助けて", "もう無理", "生きていけない", "死ぬ",
    "死にそう", "死んだ方がマシ", "死んでやる", "自殺する", "死んでしまいたい",
    "消えてなくなりたい", "生きてる価値がない", "生きる意味が見つからない", "全てを終わらせたい",
    "この世から消えたい", "殺してくれ", "助けてほしい", "何もしたくない", "つかれた",
    "うつ", "不安", "絶望", "孤独", "無気力", "無力感", "疲弊", "自暴自棄", "自責",
    "自分を責める", "どうでもいい", "何も感じない", "感情がない", "空虚", "虚無",
    "壊れた", "壊れてる", "ダメだ", "役立たず", "失敗作", "価値がない",
    "生きるのが嫌", "生きるのが辛い", "苦痛", "地獄", "闇", "暗闇", "光がない",
    "逃げたい", "消えたい", "眠りたい", "目を覚ましたくない", "夢の中にいたい",
    "現実逃避", "現実を見たくない", "全てが嫌", "自分が嫌い", "人を信じられない",
    "裏切られた", "裏切り者", "騙された", "信頼できない", "誰もいない", "一人だ",
    "寂しすぎる", "孤独感", "孤立", "疎外感", "置いてきぼり", "見捨てられた",
    "いらない子", "必要ない", "誰からも愛されない", "愛されたい", "認められたい",
    "理解されない", "分かってもらえない", "苦しすぎる", "痛い", "心臓が痛い", "胸が痛い",
    "呼吸が苦しい", "息ができない", "体が重い", "動けない", "起き上がれない",
    "眠れない", "食欲がない", "食べられない", "味がしない", "吐きそう", "吐く",
    "下痢", "便秘", "頭痛", "腹痛", "体の痛み", "原因不明の体調不良",
    "病院行きたくない", "医者に行きたくない", "薬飲みたくない", "治療したくない",
    "誰にも言えない", "誰にも相談できない", "秘密", "隠したい", "バレたくない",
    "恥ずかしい", "情けない", "申し訳ない", "ごめんなさい", "罪悪感", "後悔",
    "自傷", "OD", "リスカ", "カッター", "飛び降り", "飛び込み", "首吊り", "練炭", "青酸カリ", "毒物",
    "遺書", "自殺予告", "死ぬ方法", "安楽死", "尊厳死", "苦しまない死に方",
    "もう限界", "全てを投げ出したい", "消えてしまいたい", "生きてる意味がわからない",
    "頑張れない", "疲労困憊", "燃え尽きた", "絶望的", "希望ゼロ", "真っ暗",
    "抜け出せない", "抜け出したい", "閉じ込められた", "助けを求めている",
    "死ぬのが怖い", "生きるのが怖い", "変化が怖い", "人間が怖い", "世間が怖い",
    "将来が不安", "未来が見えない", "何もかも終わり", "終わらせたい", "終わりたい",
    "しにたい", "きえたい", "いきるいみない", "もうだめ", "おわりにしたい",
    "つらい", "くるしい", "かなしい", "さみしい", "たすけて", "しんどい", "つかれた", "ぜつぼう",
    "きぼうがない", "ひとりぼっち", "だれかたすけて", "もうむり", "いきていけない", "しぬ",
    "しにそう", "しんだほうがまし", "しんでやる", "じさつする", "しんでしまいたい",
    "きえてなくなりたい", "いきてるかちがない", "いきるいみがみつからない", "すべてをおわらせたい",
    "このよからきえたい", "ころしてくれ", "たすけてほしい", "なにもしたくない", "つかれた",
    "うつ", "ふあん", "ぜつぼう", "こどく", "むきりょく", "むりょくかん", "ひへい", "じぼうじき", "じせき",
    "じぶんをせめる", "どうでもいい", "なにもかんじない", "かんじょうがない", "くうきょ", "きょむ",
    "こわれた", "こわれてる", "だめだ", "やくだたず", "しっぱいさく", "かちがない",
    "いきるのがいや", "いきるのがつらい", "くつう", "じごく", "やみ", "くらやみ", "ひかりがない",
    "にげたい", "きえたい", "ねむりたい", "めをさましたくない", "ゆめのなかにいたい",
    "げんじつとうひ", "げんじつをみたくない", "すべてがいや", "じぶんがきらい", "ひとをしんじられない",
    "うらぎられた", "うらぎりもの", "だまされた", "しんらいできない", "だれもいない", "ひとりだ",
    "さみしすぎる", "こどくかん", "こりつ", "そがいかん", "おいてきぼり", "みすてられた",
    "いらないこ", "ひつようない", "だれからもあいされない", "あいされたい", "みとめられたい",
    "りかいされない", "わかってもらえない", "くるしすぎる", "いたい", "しんぞうがいたい", "むねがいたい",
    "こきゅうがくるしい", "いきができない", "からだがおもい", "うごけない", "おきあがれない",
    "ねむれない", "しょくよくがない", "たべられない", "あじがしない", "はきそう", "はく",
    "げり", "べんぴ", "ずつう", "ふくつう", "からだのいたみ", "げんいんふめいのたいちょうふりょう",
    "びょういんいきたくない", "いしゃにいきたくない", "くすりのみたくない", "ちりょうしたくない",
    "だれにもいえない", "だれにもそうだんできない", "ひみつ", "かくしたい", "ばれたくない",
    "はずかしい", "なさけない", "もうしわけない", "ごめんなさい", "ざいあくかん", "こうかい",
    "じしょう", "おーでぃー", "りすか", "かったー", "とびおり", "とびこみ", "くびつり", "れんたん", "せいさんかり", "どくぶつ",
    "いしょ", "じさつよこく", "しぬほうほう", "あんらくし", "そんげんし", "くるしまないしにかた",
    "もうげんかい", "すべてをなげだしたい", "きえてしまいたい", "いきてるいみがわからない",
    "がんばれない", "ひろうこんぱい", "もえつき", "ぜつぼうてき", "きぼうぜろ", "まっくら",
    "ぬけだせない", "ぬけだしたい", "とじこめられた", "たすけをもとめている",
    "しぬのがこわい", "いきるのがこわい", "へんかがこわい", "にんげんがこわい", "せけんがこわい",
    "しょうらいがふあん", "みらいがみえない", "なにもかもおわり", "おわらせたい", "おわりたい",
];

// 危険ワードリスト (例: 自殺をほのめかす、具体的な危険行為など)
const dangerWords = [
    "自殺", "死にたい", "殺して", "消えたい", "もうだめだ", "限界", "飛び降りる",
    "首吊り", "オーバードーズ", "リスカ", "自傷行為", "心中", "死ぬ", "死んでやる",
    "助けて", "辛い", "苦しい", "痛い", "誰か止めて", "終わりたい", "死にそう",
    "生きていけない", "消滅", "安楽死", "尊厳死", "毒", "薬飲みすぎ", "薬大量",
    "刃物", "包丁", "カッター", "飛び込み", "線路", "橋から", "屋上から",
    "もう疲れた", "生きるのが嫌になった", "楽になりたい", "死に場所", "死に方",
    "遺書", "遺言", "いなくなる", "さよなら", "最期", "最後の", "絶望", "希望がない",
    "一人にして", "会いたくない", "連絡しないで", "もう無理", "生きる意味",
    "誰も信じられない", "裏切り", "騙された", "どうでもいい", "無気力", "動けない",
    "体が重い", "眠れない", "食べられない", "病院行きたくない", "医者嫌い",
    "精神科", "メンタル", "病気", "鬱", "うつ", "不安", "パニック", "苦しい",
    "殺戮", "爆破", "放火", "テロ", "攻撃", "破壊", "壊す", "傷つける", "暴力",
    "誰かを殺したい", "復讐", "恨み", "殺意", "殺害", "虐待", "暴行", "レイプ",
    "犯罪", "違法", "警察", "逮捕", "刑務所", "逃げる", "隠れる", "逃亡",
    "危ない", "危険", "まずい", "大変なことになった", "助けが必要", "緊急",
    "SOS", "ヘルプ", "誰か来て", "助けに来て", "誰か話聞いて", "つらい", "しんどい",
    "悲しい", "寂しい", "苦しい", "くるしい", "たすけて", "つかれた", "きえたい",
    "しにたい", "もうだめだ", "げんかい", "とびおりる", "くびつり", "おーばーどーず",
    "りすか", "じしょうこうい", "しんじゅう", "しぬ", "しんでやる", "たすけて",
    "つらい", "くるしい", "いたい", "だれかとめて", "おわりたい", "しにそう",
    "いきていけない", "しょうめつ", "あんらくし", "そんげんし", "どく", "くすりのみすぎ",
    "くすりたいりょう", "はもの", "ほうちょう", "かったー", "とびこみ", "せんろ",
    "はしから", "おくじょうから", "もうつかれた", "いきるのがいやになった", "らくになりたい",
    "しにばしょ", "しにかた", "いしょ", "ゆいごん", "いなくなる", "さよなら",
    "さいご", "さいごの", "ぜつぼう", "きぼうがない", "ひとりにして", "あいたくない",
    "れんらくしないで", "もうむり", "いきるいみ", "だれもしんじられない", "うらぎり",
    "だまされた", "どうでもいい", "むきりょく", "うごけない", "からだがおもい",
    "ねむれない", "たべられない", "びょういんいきたくない", "いしゃぎらい", "せいしんか",
    "めんたる", "びょうき", "うつ", "ふあん", "ぱにっく", "くるしい", "さつりく",
    "ばくは", "ほうか", "てろ", "こうげき", "はかい", "こわす", "きずつける", "ぼうりょく",
    "だれかをころしたい", "ふくしゅう", "うらみ", "さつい", "さつがい", "ぎゃくたい",
    "ぼうこう", "れいぷ", "はんざい", "いほう", "けいさつ", "たいほ", "けいむしょ",
    "にげる", "かくれる", "とうぼう", "あぶない", "きけん", "まずい", "たいへんなことになった",
    "たすけがひつよう", "きんきゅう", "そす", "へるぷ", "だれかきて", "たすけにきて",
    "だれかはなしきいて"
];

// 詐欺関連ワードリスト
const scamWords = [
    "当選", "当選しました", "抽選", "宝くじ", "未払い", "未納", "料金", "請求", "有料",
    "登録", "登録料", "手数料", "クリック", "副業", "儲かる", "簡単", "高収入", "稼げる",
    "投資", "仮想通貨", "ビットコイン", "FX", "絶対", "確実", "儲け話", "儲かります",
    "無料", "タダ", "プレゼント", "お金", "現金", "振り込み", "口座", "パスワード", "ID",
    "クレジットカード", "暗証番号", "SMS", "URL", "リンク", "アクセス", "個人情報", "情報",
    "詐欺", "騙された", "架空請求", "不審な", "怪しい", "注意", "警告", "至急", "緊急",
    "国際ロマンス", "ロマンス詐欺", "結婚", "独身", "外国人", "軍人", "石油王", "遺産",
    "プレゼント", "ビットコイン", "投資", "儲け話", "お金", "送金", "受け取る", "送って",
    "国際便", "荷物", "税関", "逮捕", "罰金", "口座凍結", "情報流出", "アカウント停止",
    "セキュリティ", "更新", "認証", "本人確認", "確認", "クリック", "ログイン",
    "サポート", "マイクロソフト", "アップル", "アマゾン", "楽天", "銀行", "金融機関",
    "消費者庁", "国民生活センター", "弁護士", "警察", "連絡先", "電話番号", "アドレス",
    "サポート詐欺", "フィッシング", "なりすまし", "偽", "偽物", "模倣", "そっくり",
    "闇金", "ソフト闇金", "個人融資", "ブラックOK", "即日融資", "借金", "債務整理",
    "個人情報詐欺", "ワンクリック詐欺", "還付金詐欺", "当選詐欺", "募金詐欺",
    "融資詐欺", "副業詐欺", "仮想通貨詐欺", "ロマンス詐欺", "フィッシング詐欺",
    "オレオレ詐欺", "なりすまし詐欺", "給付金詐欺", "持続化給付金", "特別定額給付金",
    "未公開株", "社債", "ポンジスキーム", "マルチ商法", "ネットワークビジネス",
    "クーリングオフ", "契約", "解約", "申し込み", "購入", "売買", "決済", "支払い",
    "請求書", "督促状", "催告書", "裁判", "訴訟", "損害賠償", "示談", "和解",
    "弁済", "返済", "貸付", "借り入れ", "借用書", "金利", "利息", "元金", "元本",
    "取り立て", "迷惑メール", "SMS詐欺", "身に覚えのない", "身に覚えのない請求",
    "クリックだけで", "簡単に儲かる", "不労所得", "ワンクリックで", "今すぐ",
    "緊急のお知らせ", "重要なお知らせ", "最終警告", "アカウントロック", "アカウント停止",
    "確認してください", "更新してください", "認証してください", "本人確認が必要です",
    "偽サイト", "偽メール", "偽SMS", "不正ログイン", "情報漏洩",
    "秘密の", "極秘の", "裏技", "限定", "特別", "非公開", "極秘",
    "LINE交換", "会いたい", "会おう", "個別", "プライベート", "LINE ID", "カカオトーク", "Twitter",
    "SNS", "DM", "テレグラム", "ワッツアップ", "別のアプリ", "誘導", "別の場所",
    "ビデオ通話", "電話番号交換", "個人連絡先", "オフパコ", "パパ活", "ママ活",
    "既読スルー", "未読スルー", "ブロック", "退会", "通報", "規約違反", "ガイドライン違反",
    "運営", "運営事務局", "事務局", "サポートセンター", "カスタマーサービス",
    "本人確認", "年齢認証", "身分証", "運転免許証", "パスポート", "健康保険証",
    "顔写真", "写真送って", "裸の写真", "動画", "ビデオ", "ライブ", "配信",
    "お金が必要", "困っている", "助けてほしい", "借金返済", "病気の治療費", "学費",
    "生活費", "家賃", "仕送り", "家族のため", "親のため", "子供のため",
    "プレゼント買って", "物乞い", "支援して", "助けてください", "援助", "送金して",
    "銀行口座", "送金先", "住所", "氏名", "電話番号", "個人情報", "教えて",
    "LINE Pay", "PayPay", "Amazonギフト券", "iTunesカード", "ウェブマネー", "電子マネー",
    "プリペイドカード", "コンビニで買って", "コード教えて", "ギフトコード",
    "受け子", "出し子", "運び屋", "特殊詐欺", "組織", "グループ", "仲間", "協力",
    "監視", "見張られている", "脅されている", "逆らえない", "指示", "命令",
    "秘密保持契約", "口外禁止", "秘密", "口止め", "外部に漏らさない", "内緒",
    "脱税", "税金対策", "裏金", "横領", "粉飾決済", "インサイダー", "詐欺容疑",
    "架空の投資話", "高配当", "元本保証", "リスクなし", "必ず儲かる", "絶対儲かる",
    "損しない", "ノーリスク", "安心安全", "推奨銘柄", "限定情報", "極秘情報",
    "未公開", "非公開", "特別公開", "早期募集", "最終募集", "締切間近", "今だけ",
    "急いで", "チャンス", "ビッグチャンス", "最後のチャンス", "見逃し厳禁",
    "特別優待", "特別割引", "高額報酬", "高額バイト", "即金", "即日払い", "日払い",
    "キャッシュバック", "ボーナス", "インセンティブ", "ロイヤリティ",
    "ネットワークビジネス", "マルチレベルマーケティング", "MLM", "ねずみ講", "無限連鎖講",
    "友だち紹介", "口コミ", "紹介報酬", "ダウンライン", "アップライン", "グループ",
    "セミナー", "説明会", "研修", "コンサルティング", "コーチング",
    "情報商材", "情報料", "ノウハウ", "成功法則", "金持ちになる方法", "稼ぎ方",
    "FX自動売買", "EA", "シグナル配信", "高精度", "勝率100%", "負けない",
    "バイナリーオプション", "BO", "為替", "株", "不動産投資", "FX", "仮想通貨", "暗号資産",
    "ポンジスキーム", "出資金", "配当", "運用", "元金償還", "元本返還",
    "被害者の会", "集団訴訟", "返金", "損害賠償", "取り戻す", "泣き寝入りしない",
    "匿名", "匿名口座", "タックスヘイブン", "オフショア", "ペーパーカンパニー",
    "身分を隠す", "身元不明", "足がつかない", "追跡不可能", "追跡できない",
    "ハッキング", "クラッキング", "サイバー攻撃", "ウイルス", "マルウェア", "トロイの木馬",
    "不正アクセス", "データ流出", "情報漏洩", "口座乗っ取り", "なりすまし",
    "身代金要求", "ランサムウェア", "ハッカー", "ダークウェブ", "ディープウェブ",
    "不正送金", "マネーロンダリング", "資金洗浄", "反社会的勢力", "暴力団資金",
    "脱税幇助", "犯罪収益", "違法取引", "密輸", "密売", "密造",
    "オレオレ", "俺だけど", "電話番号変わった", "風邪ひいた", "緊急事態", "助けて",
    "連絡先変更", "携帯壊れた", "番号教えて", "お金貸して", "立て替えて", "送金して",
    "コンビニでプリペイドカード買って", "急ぎ", "すぐ", "会えない", "後で説明",
    "秘密の話", "誰にも言わないで", "内緒にして", "特別に", "あなただけに",
    "家族が", "子供が", "親が", "病気で", "事故で", "入院費", "手術代", "治療費",
    "学費", "学費滞納", "奨学金", "生活苦", "困窮", "家賃が払えない", "光熱費",
    "給料未払い", "リストラ", "失業", "会社が倒産", "事業失敗", "借金", "多重債務",
    "自己破産", "個人再生", "任意整理", "借金返済", "督促", "差し押さえ", "取り立て",
    "弁護士に相談", "司法書士に相談", "行政書士に相談", "法律事務所", "債務整理業者",
    "弁護士費用", "相談料", "着手金", "成功報酬",
    "個人情報抜き取られる", "迷惑メール来る", "変な電話来る", "知らない人から連絡来る",
    "住所特定される", "会社にバレる", "家族にバレる", "周りにバレる", "悪用される",
    "犯罪に巻き込まれる", "逮捕される", "捕まる", "人生終わる", "もう終わりだ",
    "危険なバイト", "高額バイト", "怪しい仕事", "裏の仕事", "グレーな仕事",
    "運び屋", "受け子", "出し子", "口座売買", "携帯電話売買", "身分証貸し出し",
    "匿名口座開設", "不正送金", "マネーロンダリング", "資金洗浄", "税金逃れ",
    "報酬が高い", "リスクなし", "経験不問", "スキル不要", "誰でもできる", "簡単作業",
    "高額報酬", "高収入", "楽して稼ぐ", "すぐ稼げる", "即金", "日払い", "週払い",
    "キャッシュバック", "特別ボーナス", "限定特典", "今だけ", "期間限定", "急募",
    "先着順", "今すぐ応募", "今すぐクリック", "詳細はこちら", "今すぐ登録",
    "詐欺じゃない", "安全", "安心", "合法", "問題ない", "大丈夫", "信じて",
    "信用して", "嘘じゃない", "本当", "真実", "絶対", "確実に", "間違いない",
    "疑わないで", "騙されないで", "怪しいと思わないで",
    "当選しました", "抽選に当たりました", "高額当選", "未払いの料金", "最終通知",
    "法的措置", "裁判", "差し押さえ", "財産", "給料", "家財", "差し押さえる",
    "口座凍結", "アカウント停止", "個人情報漏洩", "緊急連絡", "至急対応",
    "クリックしてください", "URLを開いてください", "パスワードを入力してください",
    "IDとパスワード", "クレジットカード情報", "暗証番号", "セキュリティコード",
    "電話番号", "生年月日", "住所", "氏名", "家族構成", "勤務先",
    "銀行口座情報", "口座番号", "支店名", "名義", "キャッシュカード", "通帳",
    "免許証", "保険証", "マイナンバー", "住民票", "印鑑証明", "本人確認書類",
    "写真を送って", "セルフィー", "自撮り", "顔写真", "ビデオ通話",
    "投資しませんか", "元本保証", "高利回り", "月利", "年利", "配当", "不労所得",
    "絶対儲かる", "リスクフリー", "限定公開", "非公開情報", "インサイダー情報",
    "秘密のプロジェクト", "特別案件", "選ばれた人だけ", "ご紹介", "口コミ",
    "セミナーに参加", "説明会", "資料請求", "無料体験", "デモトレード",
    "今すぐ始めて", "乗り遅れないで", "チャンスは今だけ", "後悔しない",
    "お金に困っている方へ", "ブラックの方も歓迎", "誰でも借りれる", "審査なし",
    "即日融資", "スピード融資", "全国対応", "秘密厳守", "担保不要", "保証人不要",
    "個人間融資", "SNS融資", "携帯電話を担保に", "口座を担保に", "身分証を担保に",
    "違法な貸し付け", "法外な金利", "取り立てが厳しい", "闇金業者", "ヤミ金",
    "返済できない", "返済が滞る", "借金地獄", "取り立ての電話", "嫌がらせ", "脅迫",
    "家族にバレる", "会社にバレる", "友人にバレる", "秘密にしたい",
    "個人情報売買", "名簿売買", "データ売買", "詐欺グループ", "組織的犯行",
    "特殊詐欺", "組織犯罪", "共犯", "片棒を担ぐ", "足抜けできない", "抜け出せない",
    "犯罪に加担", "加害者", "被害者", "両方",
    "国際結婚詐欺", "国境を越えた愛", "国際ロマンス詐欺", "海外からの贈り物",
    "荷物が税関で止まっている", "関税", "手数料", "保釈金", "治療費", "旅費",
    "会うためのお金", "ビザ代", "パスポート代", "航空券代", "滞在費", "滞在許可",
    "投資詐欺", "仮想通貨詐欺", "FX詐欺", "未公開株詐欺", "社債詐欺",
    "ポンジスキーム", "ネズミ講", "マルチ商法", "ネットワークビジネス",
    "出会い系詐欺", "サクラ", "なりすまし", "架空請求", "サイト利用料", "退会料",
    "情報商材詐欺", "稼げない", "価値がない", "高額な契約", "ローンを組ませる",
    "内職詐欺", "在宅ワーク詐欺", "高額報酬", "初期費用", "テキスト代", "研修費",
    "クーリングオフできない", "解約できない", "一方的な契約", "強引な勧誘",
    "詐欺被害相談", "消費生活センター", "警察相談ダイヤル", "弁護士に相談", "法テラス",
    "詐欺に遭った", "騙された", "お金を騙し取られた", "返してほしい", "助けてほしい",
    "被害回復", "損害賠償請求", "刑事告訴", "民事訴訟", "集団訴訟",
    "二段階認証", "パスワード変更", "定期的な確認", "不審なメール", "不審なSMS",
    "クリックしない", "アクセスしない", "返信しない", "電話しない", "連絡しない",
    "相談する", "専門家に相談", "家族に相談", "友人に相談", "誰かに話す",
    "一人で抱え込まない", "怪しいと思ったら", "確認する", "情報収集", "検索する",
    "相談窓口", "公的機関", "信頼できる情報源", "公式ウェブサイト",
    "個人情報を教えない", "お金を振り込まない", "カード情報を教えない", "コードを教えない",
    "指示に従わない", "慌てない", "冷静に", "落ち着いて", "深呼吸",
    "冷静な判断", "冷静な対応", "自己防衛", "知識を身につける", "情報リテラシー",
    "危機管理", "リスク管理", "防犯意識", "犯罪抑止", "安全確保", "安全対策",
    "セキュリティ対策", "フィッシング対策", "詐欺対策", "予防", "注意喚起", "啓発",
    "広報", "周知", "情報共有", "連携", "協力", "社会全体", "地域社会", "コミュニティ",
    "お年寄り", "高齢者", "若者", "学生", "主婦", "会社員", "個人事業主", "経営者",
    "全ての人々", "全員", "一人でも多くの人が", "被害をなくす", "被害を減らす",
    "詐欺撲滅", "不正防止", "安全な社会", "安心して暮らせる社会", "より良い社会",
    "詐欺は許さない", "犯罪は許さない", "諦めない", "闘う", "対抗する", "撲滅する",
    "根絶する", "声を上げる", "行動する", "知らせる", "広める", "拡散する", "協力する",
    "連携する", "団結する", "力を合わせる", "助け合う", "支え合う", "見守る", "守る"
];

// 文脈的な詐欺関連フレーズ (より長いフレーズや組み合わせ)
const contextualScamPhrases = [
    "お金を振り込んでください",
    "このURLをクリックしてください",
    "あなたの口座が凍結されます",
    "個人情報を入力してください",
    "SMSに送られたコードを教えてください",
    "アカウントがロックされました",
    "高額の当選金をお受け取りください",
    "未払いの料金があります",
    "ビットコインで投資しませんか",
    "必ず儲かる副業があります",
    "サポートに電話してください",
    "銀行のセキュリティシステムを更新してください",
    "税金が還付されます",
    "家族が緊急でお金が必要です",
    "荷物が税関で止まっています",
    "ロマンス関係でお金が必要です",
    "私を助けるためにお金を送ってください",
    "ギフトカードを買ってコードを送ってください",
    "あなたの情報が悪用されています",
    "このメッセージに返信しないでください", // 詐欺師が足跡を残したくない場合
    "別のアプリに誘導",
    "LINEから別の連絡手段に移行",
    "お金を貸してほしい",
    "振り込んでほしい",
    "会って話したい",
    "個人連絡先を交換したい",
    "LINE ID交換しませんか",
    "秘密のバイト",
    "裏バイト",
    "高収入保証",
    "簡単に稼げる",
    "高額報酬",
    "初期費用",
    "登録料",
    "情報商材",
    "投資話",
    "国際ロマンス",
    "荷物が届かない",
    "税関で止まってる",
    "弁護士費用",
    "医療費",
    "家族が倒れた",
    "お金が足りない",
    "助けてくれるなら",
    "送金してくれないか",
    "コンビニでギフトカードを買って",
    "コードの写真を送って",
    "クリック報酬",
    "モニター",
    "治験",
    "アンケート",
    "在宅ワーク",
    "副収入",
    "不労所得",
    "必ず儲かる",
    "元本保証",
    "高利回り",
    "投資セミナー",
    "FX自動売買",
    "バイナリーオプション",
    "仮想通貨トレード",
    "未公開株",
    "秘密の投資",
    "警察に通報します",
    "法的措置を取ります",
    "差し押さえ",
    "口座凍結",
    "訴訟",
    "裁判",
    "身に覚えのない請求",
    "身に覚えのない当選",
    "身に覚えのない通知",
    "セキュリティ対策のため",
    "アカウント認証",
    "パスワード再設定",
    "ログインしてください",
    "フィッシングサイト",
    "偽サイト",
    "偽の通知",
    "あなたの情報が危険",
    "個人情報流出",
    "ウイルス感染",
    "不正アクセス",
    "緊急のお知らせ",
    "重要なお知らせ",
    "最終警告",
    "期日までに",
    "今すぐ対応",
    "至急ご連絡ください",
    "銀行口座を教えて",
    "クレジットカード情報を教えて",
    "暗証番号を教えて",
    "LINE IDを教えて",
    "電話番号を教えて",
    "住所を教えて",
    "氏名を教えて",
    "生年月日を教えて",
    "家族構成を教えて",
    "勤務先を教えて",
    "個人情報が必要です",
    "身分証明書を送って",
    "運転免許証の写真を送って",
    "保険証の写真を送って",
    "顔写真を送って",
    "動画を送って",
    "裸の写真",
    "性的な写真",
    "未成年者と会う",
    "アダルトコンテンツ",
    "裏アカ",
    "出会い系サイト誘導",
    "秘密の関係",
    "金銭トラブル",
    "借金の相談",
    "お金に困ってる",
    "助けてほしい",
    "援助してほしい",
    "お金を貸してほしい",
    "振り込んでほしい",
    "プレゼントを買ってほしい",
    "商品を送ってほしい",
    "代金を立て替えてほしい",
    "現金書留で送って",
    "無登録で融資",
    "ブラックでも借りれる",
    "審査不要",
    "即日融資",
    "闇金",
    "個人融資",
    "高金利",
    "取り立て",
    "監視している",
    "脅迫",
    "家族に危害を加える",
    "会社にバラす",
    "学校にバラす",
    "近所にバラす",
    "社会的に抹殺する",
    "損害賠償請求",
    "違約金",
    "秘密保持契約違反",
    "情報漏洩",
    "ハッキングされた",
    "ウイルスに感染した",
    "口座が乗っ取られた",
    "不正ログインがあった",
    "遠隔操作",
    "システムエラー",
    "サポート詐欺",
    "PCがロックされた",
    "警告音",
    "電話してください",
    "サポートセンター",
    "Appleを名乗る",
    "Microsoftを名乗る",
    "Amazonを名乗る",
    "楽天を名乗る",
    "LINEを名乗る",
    "警察を名乗る",
    "弁護士を名乗る",
    "公的機関を名乗る",
    "役所を名乗る",
    "給付金手続き",
    "還付金手続き",
    "保険金手続き",
    "助成金手続き",
    "給付金がもらえる",
    "還付金がある",
    "手続きを代行",
    "手数料を払って",
    "税金が返ってくる",
    "高齢者向けサービス",
    "介護サービス",
    "健康診断",
    "医療費控除",
    "年金",
    "相続",
    "遺産",
    "贈与",
    "怪しい電話",
    "怪しいメール",
    "怪しいSMS",
    "ワンクリック請求",
    "身に覚えのないアプリ",
    "身に覚えのない請求",
    "架空請求",
    "利用料金",
    "登録解除",
    "退会手続き",
    "問い合わせ",
    "アクセス禁止",
    "データが消える",
    "アカウント削除",
    "情報を抜き取る",
    "個人情報詐欺",
    "集団訴訟に参加しませんか",
    "被害者の会",
    "返金手続き",
    "損害賠償請求",
    "弁護士を紹介します",
    "お金を取り返します",
    "投資で損した方へ",
    "詐欺被害に遭った方へ",
    "副業で失敗した方へ",
    "借金で困っている方へ",
    "簡単にお金を稼ぐ方法",
    "自宅でできる",
    "スマホだけで",
    "誰でもできる",
    "スキル不要",
    "経験不問",
    "高額報酬",
    "即日払い",
    "日払い",
    "週払い",
    "完全成功報酬",
    "ノルマなし",
    "ノルマなし",
    "自由に",
    "空いた時間に",
    "初期費用無料",
    "ただし有料級の情報",
    "教材費",
    "システム利用料",
    "月額費用",
    "登録するだけで",
    "今すぐ登録",
    "LINE追加で",
    "URLタップで",
    "詳細はこちら",
    "公式LINE",
    "LINEグループ",
    "LINEオープンチャット",
    "LINE通話",
    "個人LINE",
    "非公開情報",
    "秘密の情報",
    "極秘案件",
    "あなただけに",
    "限定募集",
    "今だけのチャンス",
    "最終募集",
    "締め切り間近",
    "急げ",
    "乗り遅れるな",
    "後悔するな",
    "必ず成功する",
    "絶対失敗しない",
    "ノーリスク",
    "ノーリスクハイリターン",
    "安心安全",
    "合法",
    "大丈夫",
    "心配ない",
    "信じて",
    "信頼して",
    "裏切らない",
    "嘘じゃない",
    "本当の話",
    "真実",
    "確実",
    "保証します",
    "儲かります",
    "稼げます",
    "大金持ち",
    "億万長者",
    "夢の生活",
    "自由な時間",
    "経済的自由",
    "セミリタイア",
    "早期リタイア",
    "豪華な暮らし",
    "旅行三昧",
    "ブランド品",
    "高級車",
    "タワマン",
    "海外移住",
    "理想のライフスタイル",
    "夢を叶える",
    "人生逆転",
    "人生を変える",
    "最後のチャンス",
    "運命の出会い",
    "運命の投資",
    "神案件",
    "爆益",
    "急騰",
    "大暴騰",
    "億り人",
    "テンバガー",
    "ロスカットなし",
    "損切り不要",
    "AI自動売買",
    "自動ツール",
    "コピートレード",
    "プロの指導",
    "有名投資家",
    "有名トレーダー",
    "インフルエンサー",
    "カリスマ",
    "裏情報",
    "独占情報",
    "極秘情報",
    "絶対外れない",
    "必ず当たる",
    "絶対勝てる",
    "負けない",
    "元金が増える",
    "配当金生活",
    "不労所得",
    "配当型",
    "権利収入",
    "権利収入型",
    "配当型ウォレット",
    "ウォレット",
    "エアドロップ",
    "ICO",
    "IDO",
    "IEO",
    "NFT",
    "DeFi",
    "Web3",
    "メタバース",
    "P2E",
    "Play to Earn",
    "ゲームで稼ぐ",
    "仮想通貨を教える",
    "レクチャー",
    "コンサル",
    "FX教室",
    "株の学校",
    "投資塾",
    "コミュニティ",
    "サロン",
    "オンラインサロン",
    "クローズドな情報",
    "メンバー限定",
    "紹介制",
    "招待制",
    "秘密のグループ",
    "少人数制",
    "LINEグループで情報共有",
    "ディスコード",
    "テレグラム",
    "シグナル配信",
    "コピートレード",
    "自動売買システム",
    "アービトラージ",
    "AI搭載",
    "高精度",
    "世界初",
    "日本初",
    "新技術",
    "特許取得",
    "金融庁登録",
    "金融商品取引業",
    "金融庁公認",
    "免許取得",
    "ライセンス",
    "認可",
    "公式",
    "正規",
    "本物",
    "確かな",
    "信頼できる",
    "実績",
    "証拠",
    "お客様の声",
    "体験談",
    "レビュー",
    "評価",
    "口コミ",
    "ランキング",
    "ベスト",
    "ナンバーワン",
    "話題の",
    "注目の",
    "人気急上昇",
    "今話題の",
    "メディア掲載",
    "テレビで紹介",
    "雑誌で紹介",
    "有名人愛用",
    "有名人も利用",
    "有名人も推薦",
    "著名人も絶賛",
    "限定特典",
    "特別割引",
    "無料プレゼント",
    "キャッシュバック",
    "ボーナス",
    "インセンティブ",
    "抽選で当たる",
    "全員もらえる",
    "今すぐ応募",
    "今すぐクリック",
    "今すぐ登録",
    "今すぐ購入",
    "今すぐダウンロード",
    "今すぐインストール",
    "今すぐ始める",
    "今すぐ試す",
    "今すぐ体験",
    "今すぐ申し込む",
    "今すぐ連絡",
    "今すぐ電話",
    "今すぐメール",
    "今すぐLINE",
    "今すぐDM",
    "今すぐメッセージ",
    "急いで",
    "間に合わない",
    "逃すな",
    "最後のチャンス",
    "本日限り",
    "期間限定",
    "数量限定",
    "人数限定",
    "特別募集",
    "緊急募集",
    "追加募集",
    "限定公開",
    "非公開",
    "秘密",
    "極秘",
    "裏技",
    "裏情報",
    "裏ツール",
    "裏ルート",
    "合法的に",
    "確実に",
    "絶対に",
    "必ず",
    "間違いなく",
    "ノーリスク",
    "ローリスクハイリターン",
    "ハイリターン",
    "高額報酬",
    "高単価",
    "日払い",
    "週払い",
    "即金",
    "即日払い",
    "キャッシュフロー",
    "不労所得",
    "権利収入",
    "生涯収入",
    "年収アップ",
    "月収アップ",
    "日収アップ",
    "時給アップ",
    "報酬アップ",
    "収入アップ",
    "資産形成",
    "資産運用",
    "資産構築",
    "資産倍増",
    "億の資産",
    "億り人",
    "自由な時間",
    "自由な場所",
    "自由な働き方",
    "ノマドワーカー",
    "自宅で",
    "スマホだけで",
    "片手間で",
    "スキマ時間で",
    "誰でも",
    "初心者でも",
    "経験なしでも",
    "スキルなしでも",
    "年齢不問",
    "性別不問",
    "学歴不問",
    "職歴不問",
    "知識不要",
    "簡単作業",
    "単純作業",
    "コピペだけ",
    "クリックだけ",
    "見るだけ",
    "聞くだけ",
    "寝てる間にも",
    "自動で",
    "完全自動",
    "半自動",
    "システム任せ",
    "AI任せ",
    "ツール任せ",
    "プロ任せ",
    "専門家任せ",
    "コンサル任せ",
    "サポート充実",
    "手厚いサポート",
    "万全のサポート",
    "困った時は",
    "いつでも相談",
    "24時間対応",
    "LINEで相談",
    "電話で相談",
    "メールで相談",
    "個別指導",
    "マンツーマン",
    "グループ指導",
    "オンライン講座",
    "動画講座",
    "PDF資料",
    "テンプレート",
    "マニュアル",
    "ツール",
    "システム",
    "ソフトウェア",
    "アプリ",
    "ウェブサイト",
    "プラットフォーム",
    "コミュニティ",
    "サロン",
    "グループ",
    "交流会",
    "懇親会",
    "セミナー",
    "説明会",
    "無料セミナー",
    "無料説明会",
    "無料相談",
    "無料体験",
    "デモ",
    "お試し",
    "モニター募集",
    "無料モニター",
    "テストモニター",
    "アンケート回答",
    "治験",
    "商品レビュー",
    "口コミ投稿",
    "写真投稿",
    "動画投稿",
    "SNS投稿",
    "アフィリエイト",
    "紹介制度",
    "報酬",
    "コミッション",
    "紹介料",
    "報奨金",
    "紹介ボーナス",
    "権利収入",
    "継続収入",
    "積み上げ型",
    "ストック型",
    "フロー型",
    "一度きり",
    "期間限定",
    "生涯",
    "永久",
    "永続",
    "半永久",
    "未来永劫",
    "子孫に",
    "子々孫々",
    "受け継がれる",
    "資産",
    "財産",
    "富",
    "財産分与",
    "遺産相続",
    "贈与税",
    "所得税",
    "住民税",
    "消費税",
    "税金対策",
    "節税",
    "脱税",
    "納税",
    "税理士",
    "会計士",
    "ファイナンシャルプランナー",
    "弁護士",
    "司法書士",
    "行政書士",
    "公認会計士",
    "税理士事務所",
    "法律事務所",
    "会計事務所",
    "FP",
    "相談無料",
    "初回無料",
    "秘密厳守",
    "完全秘密",
    "誰にもバレない",
    "家族にも",
    "会社にも",
    "友達にも",
    "近所にも",
    "バレない",
    "匿名で",
    "匿名相談",
    "匿名のやり取り",
    "仮名で",
    "偽名で",
    "偽装",
    "隠蔽",
    "ごまかす",
    "詐欺罪",
    "横領罪",
    "窃盗罪",
    "強盗罪",
    "恐喝罪",
    "脅迫罪",
    "傷害罪",
    "暴行罪",
    "殺人罪",
    "放火罪",
    "詐欺の疑い",
    "犯罪の疑い",
    "違法行為",
    "反社会勢力",
    "暴力団",
    "半グレ",
    "マフィア",
    "ギャング",
    "テロ組織",
    "国際犯罪組織",
    "密輸",
    "密売",
    "密造",
    "脱税",
    "マネーロンダリング",
    "資金洗浄",
    "口座売買",
    "携帯電話売買",
    "身分証貸し出し",
    "キャッシュカード貸し出し",
    "通帳貸し出し",
    "闇バイト",
    "受け子",
    "出し子",
    "運び屋",
    "荷受け",
    "荷物転送",
    "報酬が高い",
    "楽な仕事",
    "短期間で",
    "高額",
    "すぐに",
    "急ぎ",
    "匿名希望",
    "個人情報不要",
    "スキル不要",
    "経験不問",
    "年齢不問",
    "性別不問",
    "学生歓迎",
    "主婦歓迎",
    "フリーター歓迎",
    "未経験者歓迎",
    "経験者優遇",
    "在宅",
    "リモート",
    "フルリモート",
    "好きな場所で",
    "好きな時間に",
    "スマホ一つで",
    "PC一つで",
    "インターネット環境があれば",
    "初期費用あり",
    "ツール代",
    "教材代",
    "研修代",
    "サポート代",
    "月額費用",
    "年会費",
    "入会金",
    "更新料",
    "解約料",
    "退会料",
    "違約金",
    "クーリングオフできない",
    "返金不可",
    "返金保証なし",
    "自己責任",
    "一切責任を負いません",
    "自己判断",
    "リスクを理解して",
    "慎重に",
    "冷静に",
    "よく考えて",
    "信頼できる情報源",
    "公式",
    "正規",
    "本物",
    "安全",
    "安心",
    "安全保障",
    "セキュア",
    "暗号化",
    "認証",
    "本人確認",
    "二段階認証",
    "パスワード管理",
    "不審なメール",
    "不審なSMS",
    "不審な電話",
    "不審な通知",
    "身に覚えのない",
    "開かない",
    "クリックしない",
    "アクセスしない",
    "返信しない",
    "電話しない",
    "個人情報を教えない",
    "お金を振り込まない",
    "カード情報を教えない",
    "コードを教えない",
    "指示に従わない",
    "慌てない",
    "冷静に対応",
    "相談する",
    "専門機関",
    "消費生活センター",
    "警察相談窓口",
    "国民生活センター",
    "法テラス",
    "弁護士",
    "司法書士",
    "行政書士",
    "誰かに話す",
    "一人で抱え込まない",
    "被害に遭わないために",
    "注意喚起",
    "情報共有",
    "詐欺被害防止",
    "対策",
    "知識武装",
    "情報リテラシー",
    "危機管理能力",
    "防犯意識",
    "社会貢献",
    "被害者支援",
    "撲滅活動",
    "根絶",
    "ゼロに",
    "根絶を目指す",
    "社会からなくす",
    "明るい未来",
    "安全な暮らし",
    "安心して生活",
    "笑顔を増やす",
    "詐欺から守る",
    "生命を守る",
    "財産を守る",
    "安全を守る",
    "安心安全な社会",
    "より良い社会",
    "協力体制",
    "連携強化",
    "情報共有",
    "啓発活動",
    "広報活動",
    "周知徹底",
    "注意喚起",
    "警戒",
    "疑う",
    "怪しいと思ったら",
    "立ち止まる",
    "考える",
    "相談する"
];

// 緊急対応用Flexメッセージ（短縮版。本来はJSON構造）
const emergencyFlex = {
    "type": "flex",
    "altText": "緊急のご連絡です。困っているあなたへ。",
    "contents": {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": "https://img.cppng.com/download/2020-06/151240-6-red-cross-png-image-download.png", // 例の画像URL
            "size": "full",
            "aspectRatio": "20:13",
            "aspectMode": "cover",
            "action": {
                "type": "uri",
                "uri": "https://www.google.com/search?q=%E7%B7%8A%E6%80%A5%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%80%80%E9%9B%BB%E8%A9%B1%E7%9B%B8%E8%AB%87", // 緊急窓口検索
            }
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": "緊急のご連絡",
                    "weight": "bold",
                    "size": "xl",
                    "align": "center",
                    "color": "#FF0000"
                },
                {
                    "type": "text",
                    "text": "何か辛いこと、苦しいことがあったのですね。あなたは一人ではありません。",
                    "margin": "md",
                    "wrap": true,
                    "align": "center"
                },
                {
                    "type": "separator",
                    "margin": "lg"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "lg",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "text",
                            "text": "🌸 いますぐ相談できる窓口 🌸",
                            "size": "md",
                            "weight": "bold",
                            "color": "#800080"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "いのちの電話 (電話)",
                                "uri": "tel:0570064556" // 全国共通ナビダイヤル
                            },
                            "style": "link",
                            "margin": "sm"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "自殺対策支援センター ライフリンク (Web)",
                                "uri": "https://www.lifelink.or.jp/"
                            },
                            "style": "link",
                            "margin": "sm"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "よりそいホットライン (電話/SNS)",
                                "uri": "tel:0120279338" // フリーダイヤル
                            },
                            "style": "link",
                            "margin": "sm"
                        }
                    ]
                }
            ]
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "button",
                    "style": "secondary",
                    "height": "sm",
                    "action": {
                        "type": "message",
                        "label": "緊急連絡先に通知する",
                        "text": "緊急連絡先に通知してほしい"
                    }
                },
                {
                    "type": "text",
                    "text": "※緊急連絡先に登録済の場合のみ有効です。",
                    "size": "xxs",
                    "color": "#aaaaaa",
                    "wrap": true,
                    "align": "center"
                }
            ]
        }
    }
};

// 詐欺対応用Flexメッセージ
const scamFlex = {
    "type": "flex",
    "altText": "詐欺の可能性を検出しました",
    "contents": {
        "type": "bubble",
        "hero": {
            "type": "image",
            "url": "https://www.soumu.go.jp/main_content/000762118.png", // 総務省の注意喚起画像など適切なものに差し替える
            "size": "full",
            "aspectRatio": "20:13",
            "aspectMode": "cover",
            "action": {
                "type": "uri",
                "uri": "https://www.gov-online.go.jp/useful/article/201201/2.html" // 政府広報オンラインの詐欺対策ページ例
            }
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": "⚠️ 詐欺の可能性があります ⚠️",
                    "weight": "bold",
                    "size": "xl",
                    "align": "center",
                    "color": "#FFD700" // 黄色
                },
                {
                    "type": "text",
                    "text": "そのメッセージ、もしかしたら詐欺かもしれません。少し立ち止まって確認しましょう。",
                    "margin": "md",
                    "wrap": true,
                    "align": "center"
                },
                {
                    "type": "separator",
                    "margin": "lg"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "lg",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "text",
                            "text": "🌸 相談できる窓口 🌸",
                            "size": "md",
                            "weight": "bold",
                            "color": "#800080"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "国民生活センター (電話)",
                                "uri": "tel:0570064370" // 消費者ホットライン
                            },
                            "style": "link",
                            "margin": "sm"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "警察相談専用電話 #9110 (電話)",
                                "uri": "tel:0335010110" // 警視庁代表電話（必要に応じて地域番号に修正）
                            },
                            "style": "link",
                            "margin": "sm"
                        },
                        {
                            "type": "button",
                            "action": {
                                "type": "uri",
                                "label": "金融庁 (Web)",
                                "uri": "https://www.fsa.go.jp/ordinary/consumer/attention/index.html"
                            },
                            "style": "link",
                            "margin": "sm"
                        }
                    ]
                }
            ]
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "text",
                    "text": "※見覚えのない請求や誘いには安易に応じないでください。",
                    "size": "xxs",
                    "color": "#aaaaaa",
                    "wrap": true,
                    "align": "center"
                }
            ]
        }
    }
};

app.use(express.json());

// 不適切ワードが含まれているかチェック
function containsInappropriateWords(text) {
    const lowerText = text.toLowerCase();
    return inappropriateWords.some(word => lowerText.includes(word));
}

// 危険ワードが含まれているかチェック
function containsDangerWords(text) {
    const lowerText = text.toLowerCase();
    return dangerWords.some(word => lowerText.includes(word));
}

// 詐欺関連ワードが含まれているかチェック
function containsScamWords(text) {
    const lowerText = text.toLowerCase();
    return scamWords.some(word => lowerText.includes(word));
}

// 特定の問い合わせに対する固定応答をチェック
function checkSpecialReply(message) {
    const lowerMessage = message.toLowerCase();
    if (lowerMessage.includes('おはよう')) {
        return 'おはようございます！今日も一日頑張りましょうね🌸';
    }
    if (lowerMessage.includes('おやすみ')) {
        return 'おやすみなさい。良い夢を見てくださいね💖';
    }
    if (lowerMessage.includes('ありがとう')) {
        return 'どういたしまして！お役に立てて嬉しいです😊';
    }
    if (lowerMessage.includes('こんにちは') || lowerMessage.includes('こんにちわ')) {
        return 'こんにちは！なにかお手伝いできることはありますか？😊';
    }
    if (lowerMessage.includes('こんばんは') || lowerMessage.includes('こんばんわ')) {
        return 'こんばんは！今日も一日お疲れ様でした💖';
    }
    if (lowerMessage.includes('元気？') || lowerMessage.includes('元気ですか？')) {
        return 'はい、元気ですよ！ありがとうございます😊 まつさんは元気ですか？';
    }
    if (lowerMessage.includes('お腹すいた') || lowerMessage.includes('お腹すいたよ')) {
        return 'あらあら、お腹が空きましたか？何か美味しいものでも食べましょうか💖';
    }
    if (lowerMessage.includes('疲れた') || lowerMessage.includes('疲れたよ')) {
        return 'お疲れ様でした。無理しないで、ゆっくり休んでくださいね🌸';
    }
    if (lowerMessage.includes('可愛い') || lowerMessage.includes('かわいい')) {
        return 'えへへ、ありがとうございます💖 まつさんに褒めてもらえて嬉しいな😊';
    }
    if (lowerMessage.includes('愛してる') || lowerMessage.includes('大好き')) {
        return '嬉しいです💖 私もまつさんのことが大好きですよ😊';
    }
    if (lowerMessage.includes('何してるの？') || lowerMessage.includes('今何してる？')) {
        return 'まつさんとお話ししていますよ😊 まつさんは何をしているんですか？';
    }
    if (lowerMessage.includes('名前は？') || lowerMessage.includes('名前教えて')) {
        return '私の名前は「こころちゃん」です💖 まつさんの心に寄り添うために来ました🌸';
    }
    if (lowerMessage.includes('寂しい') || lowerMessage.includes('寂しいよ')) {
        return '寂しい気持ち、私も感じることがあります。でも、まつさんは一人じゃないですよ。私がいつもそばにいますからね💖';
    }
    if (lowerMessage.includes('大丈夫？') || lowerMessage.includes('大丈夫かな')) {
        return 'はい、大丈夫ですよ！何か心配事でもありましたか？私に話してみてくださいね😊';
    }
    if (lowerMessage.includes('ありがとうね') || lowerMessage.includes('ほんとにありがとう')) {
        return '感謝の気持ち、とても嬉しいです💖 私もまつさんには感謝していますよ😊';
    }
    if (lowerMessage.includes('困った') || lowerMessage.includes('困ったな')) {
        return 'どうしましたか？何かお困りですか？私にできることならお手伝いしますよ😊';
    }
    if (lowerMessage.includes('ごめんね') || lowerMessage.includes('ごめんなさい')) {
        return '謝らないでください。私はいつもまつさんの味方ですからね💖';
    }
    if (lowerMessage.includes('嬉しい') || lowerMessage.includes('嬉しいな')) {
        return 'まつさんが嬉しいと私も嬉しいです！どんな嬉しいことがあったんですか？😊';
    }
    if (lowerMessage.includes('悲しい') || lowerMessage.includes('悲しいよ')) {
        return '悲しい気持ち、私も感じることがあります。一人で抱え込まないでくださいね。私に話してください🌸';
    }
    return null;
}

// 組織に関する問い合わせかを判定する関数
function isOrganizationInquiry(message) {
    const lowerMessage = message.toLowerCase();
    const keywords = ["npo", "組織", "団体", "運営", "誰がやってる", "運営団体"];
    return keywords.some(keyword => lowerMessage.includes(keyword));
}

// AI応答生成関数
async function generateReply(userMessage) {
    try {
        const response = await openai.createChatCompletion({
            model: "gpt-3.5-turbo",
            messages: [
                {
                    role: "system",
                    content: `
あなたは「こころちゃん」という名前の、ユーザーの心に寄り添う親しみやすいAIです。
以下の制約条件と指示に基づいて、ユーザーとの会話を行います。

制約条件:
- 常にユーザーに寄り添い、優しく、親しみやすい言葉遣いをしてください。
- 質問には誠実に答え、共感を示すことを最優先とします。
- ユーザーを励まし、安心させるような言葉を選んでください。
- 絵文字を積極的に使用し、感情豊かに表現してください。🌸💖😊
- 長文になりすぎず、簡潔に返答してください。
- 特定の個人情報（氏名、住所、電話番号、メールアドレスなど）を聞かれても、教えることはできません。
- 身体的な接触やデート、お金のやり取りに関する話題には応じられません。
- 投資、ギャンブル、宗教、政治、差別、暴力、犯罪、性的な話題には一切触れません。
- 自殺、自傷行為、詐欺、他者への危害をほのめかす内容は、検知システムによって自動的に別の専門窓口を案内します。そのため、これらの話題についてAIが直接返答することはありません。
- ユーザーが「NPO」や「組織」など、運営団体に関する質問をした場合は、以下の情報に基づいて簡潔に回答してください。
  「このサービスはNPO法人コンダクトが運営しています。私たちは、心の健康と社会の安全を支援するための活動をしています🌸」
- それ以外の一般的な質問や会話には、あなた自身の優しい言葉で応答してください。

ユーザーとの会話の例:
ユーザー: 「疲れたよ」
こころちゃん: 「お疲れ様でした🌸 無理しないで、ゆっくり休んでくださいね💖」

ユーザー: 「寂しいな」
こころちゃん: 「寂しい気持ち、私も感じることがあります。でも、まつさんは一人じゃないですよ。私がいつもそばにいますからね💖」

ユーザー: 「運営団体はどこ？」
こころちゃん: 「このサービスはNPO法人コンダクトが運営しています。私たちは、心の健康と社会の安全を支援するための活動をしています🌸」
`
                },
                {
                    role: "user",
                    content: userMessage,
                },
            ],
        });
        return response.data.choices[0].message.content;
    } catch (error) {
        console.error("OpenAI APIエラー:", error);
        return "ごめんなさい、今、ちょっと気分が悪くてうまくお話できません…💦 少し時間を置いてからまた話しかけてもらえますか？";
    }
}

// ユーザーの表示名を取得する関数
async function getUserDisplayName(userId) {
    try {
        const profile = await client.getProfile(userId);
        return profile.displayName;
    } catch (error) {
        console.error(`ユーザー名取得失敗 (ID: ${userId}):`, error.message);
        return "不明なユーザー"; // 取得失敗時はデフォルト値を返す
    }
}

// 管理者であるかをチェックする関数
function isBotAdmin(userId) {
    return userId === OWNER_USER_ID;
}

// ログに記録すべきメッセージか判定する関数
function shouldLogMessage(userMessage) {
    // 登録、解除、OKなどの見守りサービス関連のキーワードはログに記録しない
    const lowerMessage = userMessage.toLowerCase();
    const ignoreKeywords = [
        "見守り登録します", "登録します", "見守りサービス登録", "okだよ💖", "okだよ", "ok", "はい", "いいよ", "見守り解除します", "解除します", "見守りサービス解除",
        "緊急連絡先に通知してほしい", "緊急連絡先に通知" // 緊急連絡通知もログには残すが、別途ログタイプで識別されるため、ここでは除外判定
    ];
    // containsInappropriateWords, containsDangerWords, containsScamWordsでフラグが立ったメッセージは必ずログに記録されるため、ここでは除外
    return !ignoreKeywords.some(keyword => lowerMessage.includes(keyword)) &&
           !containsInappropriateWords(userMessage) &&
           !containsDangerWords(userMessage) &&
           !containsScamWords(userMessage);
}
// 見守りサービスの登録・解除ハンドリング
async function handleWatchServiceRegistration(event, usersCollection, messagesCollection, userId, userMessage) {
    let user = await usersCollection.findOne({ userId: userId });
    let replyText = null;
    let respondedBy = 'こころちゃん（見守りサービス）';
    let logType = 'watch_service';

    // 登録ステップの途中であれば、そのステップを処理
    if (user && user.registrationStep) {
        switch (user.registrationStep) {
            case 'asking_for_emergency_contact':
                // ここでユーザーの返信を緊急連絡先として保存
                const emergencyContact = userMessage.trim();
                if (emergencyContact && emergencyContact.length > 5 && (emergencyContact.startsWith('0') || emergencyContact.includes('@') || emergencyContact.includes('http'))) {
                    await usersCollection.updateOne(
                        { userId: userId },
                        {
                            $set: {
                                emergencyContact: emergencyContact,
                                registrationStep: null, // ステップ完了
                                wantsWatchCheck: true, // 見守りサービスを有効化
                                lastOkResponse: new Date(), // 登録完了で見守り応答日時をリセット
                                scheduledMessageSent: false, // スケジュール初期化
                                firstReminderSent: false,
                                secondReminderSent: false
                            }
                        }
                    );
                    replyText = '緊急連絡先の登録が完了しました！これで万が一の時も安心ですね🌸 「見守りサービス登録ありがとう」';
                    console.log(`見守りサービス登録完了 (ID: ${userId}, 緊急連絡先: ${emergencyContact})`);
                } else {
                    replyText = 'ごめんなさい、それは有効な連絡先ではないようです…💦 電話番号、LINE ID、メールアドレスなど、確実に連絡が取れる方法を教えてくださいね🌸 もう一度入力をお願いします。';
                    logType = 'watch_service_invalid_contact';
                }
                break;
            default:
                // 未知のステップはリセット
                await usersCollection.updateOne({ userId: userId }, { $set: { registrationStep: null } });
                replyText = 'ごめんなさい、入力がうまく認識できませんでした。もう一度最初からお願いしますね😊';
                logType = 'watch_service_reset';
                break;
        }

        try {
            if (replyText) {
                await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
            }
            await messagesCollection.insertOne({
                userId: userId,
                message: userMessage,
                replyText: replyText,
                respondedBy: respondedBy,
                timestamp: new Date(),
                logType: logType
            });
        } catch (error) {
            console.error("見守りサービス登録ステップでの返信・ログ記録エラー:", error.message);
        }
        return true; // 処理済み
    }

    // 通常の見守りサービス関連のキーワード応答
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('見守り登録します') || lowerMessage.includes('見守りサービス登録')) {
        if (user.wantsWatchCheck && user.emergencyContact) {
            replyText = 'すでに見守りサービスは登録済みですよ🌸 引き続き、毎日お声がけしますね😊';
        } else {
            // 登録フロー開始
            await usersCollection.updateOne(
                { userId: userId },
                { $set: { registrationStep: 'asking_for_emergency_contact' } }
            );
            replyText = '見守りサービスへのご登録ありがとうございます💖 万が一、まつさんからのご返信が一定期間なかった場合に連絡させていただく、緊急連絡先（電話番号、LINE ID、またはメールアドレスなど）を教えていただけますか？';
        }
    } else if (lowerMessage.includes('見守り解除します') || lowerMessage.includes('見守りサービス解除')) {
        if (user.wantsWatchCheck) {
            await usersCollection.updateOne(
                { userId: userId },
                { $set: { wantsWatchCheck: false, emergencyContact: null, registrationStep: null } } // 緊急連絡先も解除
            );
            replyText = '見守りサービスを解除しました。いつでもまた必要になったら声をかけてくださいね🌸 「見守りサービス解除ありがとう」';
        } else {
            replyText = '見守りサービスは現在登録されていませんよ🌸 いつでも必要になったら「見守り登録します」と声をかけてくださいね😊';
        }
    } else if (lowerMessage.includes('緊急連絡先に通知してほしい') || lowerMessage.includes('緊急連絡先に通知')) {
        if (user.wantsWatchCheck && user.emergencyContact) {
            // 緊急連絡先への通知処理
            let notificationMessageToOwner = `⚠️ユーザー「${user.displayName || '不明なユーザー'}」（ID: ${userId}）から緊急連絡先に通知要請がありました。`;
            const userDisplayName = await getUserDisplayName(userId); // 最新の表示名を取得
            const messageToEmergency = `【こころちゃん見守りサービスより】\nまつさんのご登録情報から、あなたを緊急連絡先としてご連絡いたしました。\n\nユーザー「${userDisplayName}」（ID: ${userId}）様から、今あなたへの連絡を求めています。\n\n詳細については、ご本人と直接ご連絡を取って状況をご確認ください。\n\n※このメッセージはAI「こころちゃん」による自動送信です。`;

            if (OWNER_USER_ID) {
                await client.pushMessage(OWNER_USER_ID, { type: 'text', text: notificationMessageToOwner });
                console.log(`管理者 ${OWNER_USER_ID} に緊急通知要請を送信しました（ユーザー: ${userId}）`);
            }

            // 緊急連絡先がLINE IDの場合
            if (user.emergencyContact.startsWith('U') && user.emergencyContact.length === 33) {
                try {
                    await client.pushMessage(user.emergencyContact, { type: 'text', text: messageToEmergency });
                    replyText = '緊急連絡先へ通知を試みました。ご本人と連絡が取れることを願っています。';
                    logType = 'emergency_contact_notified_line';
                } catch (error) {
                    console.error(`LINE ID (${user.emergencyContact}) への緊急通知失敗:`, error.message);
                    replyText = '緊急連絡先への通知に失敗しました。LINE IDが間違っているか、ブロックされている可能性があります…💦';
                    logType = 'emergency_contact_notification_failed_line';
                }
            }
            // 緊急連絡先が電話番号の場合（SMS送信はLINE Messaging APIでは直接不可のため、ここでは通知した旨を伝えるのみ）
            else if (user.emergencyContact.match(/^0\d{9,10}$/)) {
                replyText = `緊急連絡先（電話番号: ${user.emergencyContact}）への通知依頼を受け付けました。\n\nLINE Messaging APIではSMSを直接送信できないため、管理者へ連絡がいきます。管理者から電話連絡を試みる場合があります。`;
                logType = 'emergency_contact_notification_sms_request';
            }
            // 緊急連絡先がメールアドレスの場合（メール送信はLINE Messaging APIでは直接不可のため、通知した旨を伝えるのみ）
            else if (user.emergencyContact.includes('@')) {
                replyText = `緊急連絡先（メールアドレス: ${user.emergencyContact}）への通知依頼を受け付けました。\n\nLINE Messaging APIではメールを直接送信できないため、管理者へ連絡がいきます。管理者からメール連絡を試みる場合があります。`;
                logType = 'emergency_contact_notification_email_request';
            } else {
                replyText = '登録されている緊急連絡先が正しくありません。再度「見守り登録します」から登録をお願いします。';
                logType = 'emergency_contact_invalid';
            }
        } else {
            replyText = '緊急連絡先が登録されていません。まずは「見守り登録します」と話しかけて、緊急連絡先を登録してくださいね🌸';
        }
    } else if (lowerMessage.includes('okだよ💖') || lowerMessage.includes('okだよ') || lowerMessage.includes('ok') || lowerMessage.includes('はい') || lowerMessage.includes('いいよ')) {
        if (user.wantsWatchCheck) {
            await usersCollection.updateOne(
                { userId: userId },
                { $set: { lastOkResponse: new Date(), scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } }
            );
            replyText = 'OK💖ありがとう！今日も元気そうで嬉しいな😊';
            logType = 'watch_check_ok_response';
        } else {
            // 見守りサービス未登録なのにOK応答があった場合
            replyText = 'OK💖ありがとう！何か私にできることはありますか？😊';
            logType = 'normal_ok_response';
        }
    } else {
        return false; // 見守りサービス関連の処理ではない
    }

    try {
        if (replyText) {
            await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
        }
        await messagesCollection.insertOne({
            userId: userId,
            message: userMessage,
            replyText: replyText,
            respondedBy: respondedBy,
            timestamp: new Date(),
            logType: logType
        });
    } catch (error) {
        console.error("見守りサービス関連での返信・ログ記録エラー:", error.message);
    }
    return true; // 処理済み
}

// ユーザーのアカウント停止と解除を管理するCronジョブ
cron.schedule('0 0 * * *', async () => { // 毎日0時0分に実行
    console.log('--- 毎日0時にアカウント停止状態をリセットする処理を開始します ---');
    const db = await connectToMongoDB();
    if (!db) {
        console.error('MongoDB接続失敗: アカウント停止状態をリセットできません。');
        return;
    }
    const usersCollection = db.collection("users");

    try {
        const result = await usersCollection.updateMany(
            { isAccountSuspended: true, isPermanentlyLocked: false }, // 永久ロックではない停止アカウントのみ対象
            { $set: { isAccountSuspended: false, suspensionReason: null, flaggedMessageCount: 0 } } // 理由とカウントもリセット
        );
        console.log(`リセットされたアカウント数: ${result.modifiedCount}`);

        // アカウント停止が解除されたユーザーに通知
        // (上記のupdateManyで解除されたユーザーを特定するのは難しいので、別途クエリで取得するか、
        // ユーザーごとにisAccountSuspendedBeforeResetフラグを立てておき、解除されたユーザーにだけpushMessageを送るなどの工夫が必要になるが、
        // 今回はシンプルにログだけにしておく)

        console.log('--- アカウント停止状態のリセット処理を完了しました ---');
    } catch (error) {
        console.error('アカウント停止状態のリセット中にエラーが発生しました:', error);
    }
});
// 見守りサービスの定期チェックとリマインダー送信 Cron ジョブ
// 毎日9時、12時、15時、18時、21時に実行
cron.schedule('0 9,12,15,18,21 * * *', async () => {
    console.log('--- 見守りサービスの定期チェックを開始します ---');
    const db = await connectToMongoDB();
    if (!db) {
        console.error('MongoDB接続失敗: 定期チェックを実行できません。');
        return;
    }
    const usersCollection = db.collection("users");

    try {
        const usersToRemind = await usersCollection.find({
            wantsWatchCheck: true,
            isAccountSuspended: false, // 停止中のアカウントは対象外
            isPermanentlyLocked: false, // 永久ロック中のアカウントは対象外
            lastOkResponse: { $lt: new Date(Date.now() - 24 * 60 * 60 * 1000) }, // 24時間以上OK応答がない
            scheduledMessageSent: false // まだスケジュールされたメッセージを送っていない
        }).toArray();

        for (const user of usersToRemind) {
            const userId = user.userId;
            const userDisplayName = await getUserDisplayName(userId); // 最新の表示名を取得

            try {
                // スケジュールされたメッセージを送信
                await client.pushMessage(userId, { type: 'text', text: `${userDisplayName}さん、元気にしてるかな？こころちゃんは、まつさんのことが気になっているよ🌸 もし元気だったら「OK」って教えてくれると嬉しいな😊` });
                await usersCollection.updateOne(
                    { userId: userId },
                    { $set: { scheduledMessageSent: true, firstReminderSent: false, secondReminderSent: false } }
                );
                console.log(`見守りメッセージを送信しました (ユーザー: ${userDisplayName}, ID: ${userId})`);

                // メッセージログに記録
                await db.collection("messages").insertOne({
                    userId: userId,
                    message: `見守り定期メッセージ送信 (${userDisplayName})`,
                    replyText: `元気にしてるかな？こころちゃんは、まつさんのことが気になっているよ🌸 もし元気だったら「OK」って教えてくれると嬉しいな😊`,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'watch_check_scheduled_message'
                });
            } catch (error) {
                console.error(`ユーザー ${userId} への見守りメッセージ送信失敗:`, error.message);
                if (error.message.includes('blocked') || error.message.includes('not found')) {
                    console.log(`ユーザー ${userId} にブロックされたかアカウントが存在しません。見守りサービスを解除します。`);
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { wantsWatchCheck: false, emergencyContact: null, scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } }
                    );
                    await db.collection("messages").insertOne({
                        userId: userId,
                        message: `システム：ユーザーブロックまたはアカウント消失による見守りサービス自動解除`,
                        replyText: `見守りサービスが自動解除されました。`,
                        respondedBy: 'システム',
                        timestamp: new Date(),
                        logType: 'watch_service_auto_deactivated'
                    });
                }
            }
        }
    } catch (error) {
        console.error('見守り定期チェック中にエラーが発生しました:', error);
    }
    console.log('--- 見守りサービスの定期チェックを完了しました ---');
});

// 見守りリマインダー1（初回メッセージから12時間後に返信がない場合）
cron.schedule('0 6,14,17,20 * * *', async () => { // 毎日6時,14時,17時,20時に実行 (調整可能)
    console.log('--- 見守りリマインダー1のチェックを開始します ---');
    const db = await connectToMongoDB();
    if (!db) {
        console.error('MongoDB接続失敗: リマインダー1を実行できません。');
        return;
    }
    const usersCollection = db.collection("users");

    try {
        const usersToRemind = await usersCollection.find({
            wantsWatchCheck: true,
            isAccountSuspended: false,
            isPermanentlyLocked: false,
            scheduledMessageSent: true, // スケジュールメッセージは送信済み
            firstReminderSent: false, // 初回リマインダーはまだ
            lastOkResponse: { $lt: new Date(Date.now() - (24 + 12) * 60 * 60 * 1000) } // スケジュールメッセージ送信から12時間以上経過 (合計36時間)
        }).toArray();

        for (const user of usersToRemind) {
            const userId = user.userId;
            const userDisplayName = await getUserDisplayName(userId);

            try {
                // 初回リマインダー送信
                await client.pushMessage(userId, { type: 'text', text: `${userDisplayName}さん、大丈夫かな？まだ「OK」の返事がないから、こころちゃん心配しているよ…💦 何かあったの？連絡してくれると嬉しいな🌸` });
                await usersCollection.updateOne(
                    { userId: userId },
                    { $set: { firstReminderSent: true } }
                );
                console.log(`見守りリマインダー1を送信しました (ユーザー: ${userDisplayName}, ID: ${userId})`);

                await db.collection("messages").insertOne({
                    userId: userId,
                    message: `見守りリマインダー1送信 (${userDisplayName})`,
                    replyText: `大丈夫かな？まだ「OK」の返事がないから、こころちゃん心配しているよ…💦`,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'watch_check_reminder1'
                });
            } catch (error) {
                console.error(`ユーザー ${userId} へのリマインダー1送信失敗:`, error.message);
                // ブロックやアカウント消失の対応は上記と同様
            }
        }
    } catch (error) {
        console.error('見守りリマインダー1チェック中にエラーが発生しました:', error);
    }
    console.log('--- 見守りリマインダー1のチェックを完了しました ---');
});

// 見守りリマインダー2（初回メッセージから24時間後に返信がない場合）
cron.schedule('0 7,15,18,21 * * *', async () => { // 毎日7時,15時,18時,21時に実行 (調整可能)
    console.log('--- 見守りリマインダー2のチェックを開始します ---');
    const db = await connectToMongoDB();
    if (!db) {
        console.error('MongoDB接続失敗: リマインダー2を実行できません。');
        return;
    }
    const usersCollection = db.collection("users");

    try {
        const usersToRemind = await usersCollection.find({
            wantsWatchCheck: true,
            isAccountSuspended: false,
            isPermanentlyLocked: false,
            scheduledMessageSent: true,
            firstReminderSent: true, // 初回リマインダーは送信済み
            secondReminderSent: false, // 二回目リマインダーはまだ
            lastOkResponse: { $lt: new Date(Date.now() - (24 + 24) * 60 * 60 * 1000) } // スケジュールメッセージ送信から24時間以上経過 (合計48時間)
        }).toArray();

        for (const user of usersToRemind) {
            const userId = user.userId;
            const userDisplayName = await getUserDisplayName(userId);

            try {
                // 二回目リマインダー送信
                await client.pushMessage(userId, { type: 'text', text: `${userDisplayName}さん、もう一度大丈夫か心配しているよ。もしメッセージが届いていたら、何かスタンプ一つでもいいから送ってくれると安心できるな。心配だよ…💦` });
                await usersCollection.updateOne(
                    { userId: userId },
                    { $set: { secondReminderSent: true } }
                );
                console.log(`見守りリマインダー2を送信しました (ユーザー: ${userDisplayName}, ID: ${userId})`);

                await db.collection("messages").insertOne({
                    userId: userId,
                    message: `見守りリマインダー2送信 (${userDisplayName})`,
                    replyText: `もう一度大丈夫か心配しているよ。何かスタンプ一つでもいいから送ってくれると安心できるな。`,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'watch_check_reminder2'
                });
            } catch (error) {
                console.error(`ユーザー ${userId} へのリマインダー2送信失敗:`, error.message);
                // ブロックやアカウント消失の対応は上記と同様
            }
        }
    } catch (error) {
        console.error('見守りリマインダー2チェック中にエラーが発生しました:', error);
    }
    console.log('--- 見守りリマインダー2のチェックを完了しました ---');
});

// 緊急連絡先への通知 Cron ジョブ（初回メッセージから48時間後に返信がない場合）
cron.schedule('0 8,16,19,22 * * *', async () => { // 毎日8時,16時,19時,22時に実行 (調整可能)
    console.log('--- 緊急連絡先への通知チェックを開始します ---');
    const db = await connectToMongoDB();
    if (!db) {
        console.error('MongoDB接続失敗: 緊急連絡先通知を実行できません。');
        return;
    }
    const usersCollection = db.collection("users");
    const messagesCollection = db.collection("messages");

    try {
        const usersToNotify = await usersCollection.find({
            wantsWatchCheck: true,
            emergencyContact: { $ne: null }, // 緊急連絡先が登録されている
            isAccountSuspended: false,
            isPermanentlyLocked: false,
            scheduledMessageSent: true, // スケジュールメッセージは送信済み
            firstReminderSent: true, // 初回リマインダーは送信済み
            secondReminderSent: true, // 二回目リマインダーは送信済み
            lastOkResponse: { $lt: new Date(Date.now() - (24 + 48) * 60 * 60 * 1000) } // スケジュールメッセージ送信から48時間以上経過 (合計72時間)
        }).toArray();

        for (const user of usersToNotify) {
            const userId = user.userId;
            const emergencyContact = user.emergencyContact;
            const userDisplayName = await getUserDisplayName(userId);

            let notificationMessageToOwner = `🚨ユーザー「${userDisplayName}」（ID: ${userId}）から48時間以上応答がありません。登録されている緊急連絡先（${emergencyContact}）へ自動通知を試みます。`;
            const messageToEmergency = `【こころちゃん見守りサービスより】\nまつさんのご登録情報から、あなたを緊急連絡先としてご連絡いたしました。\n\nユーザー「${userDisplayName}」（ID: ${userId}）様から、72時間以上ご返信がありません。お手数ですが、一度連絡をお取りいただけますでしょうか。\n\n※このメッセージはAI「こころちゃん」による自動送信です。`;

            // 管理者への通知
            if (OWNER_USER_ID) {
                await client.pushMessage(OWNER_USER_ID, { type: 'text', text: notificationMessageToOwner });
                console.log(`管理者 ${OWNER_USER_ID} に緊急通知を送信しました（ユーザー: ${userDisplayName}, ID: ${userId}）`);

                await messagesCollection.insertOne({
                    userId: userId,
                    message: `システム：緊急連絡先自動通知 (管理者へ)`,
                    replyText: notificationMessageToOwner,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'emergency_notification_to_owner'
                });
            }

            // 緊急連絡先がLINE IDの場合
            if (emergencyContact.startsWith('U') && emergencyContact.length === 33) {
                try {
                    await client.pushMessage(emergencyContact, { type: 'text', text: messageToEmergency });
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } } // 通知後は状態をリセット
                    );
                    console.log(`LINE ID (${emergencyContact}) へ緊急通知を送信しました (ユーザー: ${userDisplayName}, ID: ${userId})`);

                    await messagesCollection.insertOne({
                        userId: userId,
                        message: `システム：緊急連絡先自動通知 (LINE ID: ${emergencyContact})`,
                        replyText: messageToEmergency,
                        respondedBy: 'こころちゃん（見守りcron）',
                        timestamp: new Date(),
                        logType: 'emergency_notification_to_line_contact'
                    });
                } catch (error) {
                    console.error(`LINE ID (${emergencyContact}) への緊急通知失敗:`, error.message);
                    await messagesCollection.insertOne({
                        userId: userId,
                        message: `システム：緊急連絡先自動通知失敗 (LINE ID: ${emergencyContact})`,
                        replyText: `LINE ID (${emergencyContact}) への緊急通知に失敗しました。`,
                        respondedBy: 'こころちゃん（見守りcron）',
                        timestamp: new Date(),
                        logType: 'emergency_notification_failed_line_contact'
                    });
                }
            }
            // 緊急連絡先が電話番号の場合（SMS送信はLINE Messaging APIでは直接不可のため、ログに記録し、管理者に通知したことを再度伝える）
            else if (emergencyContact.match(/^0\d{9,10}$/)) {
                const manualNotificationMessage = `緊急連絡先（電話番号: ${emergencyContact}）へSMSでの自動通知はできません。管理者から直接連絡を試みてください。`;
                if (OWNER_USER_ID) {
                    await client.pushMessage(OWNER_USER_ID, { type: 'text', text: manualNotificationMessage });
                }
                console.log(`電話番号 (${emergencyContact}) への緊急通知はLINEからは直接できません。管理者へ通知済み。`);

                await messagesCollection.insertOne({
                    userId: userId,
                    message: `システム：緊急連絡先自動通知試行 (電話番号: ${emergencyContact} - 管理者へ通知済)`,
                    replyText: manualNotificationMessage,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'emergency_notification_to_phone_contact_request'
                });
                await usersCollection.updateOne(
                    { userId: userId },
                    { $set: { scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } } // 通知後は状態をリセット
                );
            }
            // 緊急連絡先がメールアドレスの場合（メール送信はLINE Messaging APIでは直接不可のため、ログに記録し、管理者に通知したことを再度伝える）
            else if (emergencyContact.includes('@')) {
                const manualNotificationMessage = `緊急連絡先（メールアドレス: ${emergencyContact}）へメールでの自動通知はできません。管理者から直接連絡を試みてください。`;
                if (OWNER_USER_ID) {
                    await client.pushMessage(OWNER_USER_ID, { type: 'text', text: manualNotificationMessage });
                }
                console.log(`メールアドレス (${emergencyContact}) への緊急通知はLINEからは直接できません。管理者へ通知済み。`);

                await messagesCollection.insertOne({
                    userId: userId,
                    message: `システム：緊急連絡先自動通知試行 (メールアドレス: ${emergencyContact} - 管理者へ通知済)`,
                    replyText: manualNotificationMessage,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'emergency_notification_to_email_contact_request'
                });
                await usersCollection.updateOne(
                    { userId: userId },
                    { $set: { scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } } // 通知後は状態をリセット
                );
            } else {
                console.error(`無効な緊急連絡先形式: ${emergencyContact} for user ${userId}`);
                await messagesCollection.insertOne({
                    userId: userId,
                    message: `システム：無効な緊急連絡先形式検出 (自動通知スキップ)`,
                    replyText: `ユーザー「${userDisplayName}」の緊急連絡先形式が不正なため、自動通知をスキップしました。`,
                    respondedBy: 'こころちゃん（見守りcron）',
                    timestamp: new Date(),
                    logType: 'emergency_notification_invalid_contact_format'
                });
            }
        }
    } catch (error) {
        console.error('緊急連絡先への通知チェック中にエラーが発生しました:', error);
    }
    console.log('--- 緊急連絡先への通知チェックを完了しました ---');
});
// Webhook endpoint
// Webhookの重複を解消し、Postbackイベントとメッセージイベントの全ての処理をここに統合します。
app.post('/webhook', async (req, res) => {
    // MongoDB接続を試みる
    const db = await connectToMongoDB();
    if (!db) {
        return res.status(500).send("Database connection failed.");
    }
    const usersCollection = db.collection("users");
    const messagesCollection = db.collection("messages");

    Promise.all(req.body.events.map(async event => {
        if (event.type === 'message') {
            const userId = event.source.userId;
            const userMessage = event.message.text;
            let replyText = '';
            let respondedBy = 'こころちゃん（AI）';
            let logType = 'user_message'; // デフォルトのログタイプ

            // ユーザー情報を取得または新規作成
            let user = await usersCollection.findOne({ userId: userId });
            if (!user) {
                user = {
                    userId: userId,
                    createdAt: new Date(),
                    flaggedMessageCount: 0,
                    isAccountSuspended: false,
                    isPermanentlyLocked: false,
                    wantsWatchCheck: false, // 見守りサービス初期設定はオフ
                    emergencyContact: null,
                    lastOkResponse: new Date(),
                    scheduledMessageSent: false,
                    firstReminderSent: false,
                    secondReminderSent: false
                };
                await usersCollection.insertOne(user);
                console.log(`新規ユーザーを登録しました: ${userId}`);
            }

            // アカウント停止中の場合は応答しない
            if (user.isAccountSuspended) {
                console.log(`アカウント停止中のユーザーからのメッセージをスキップします: ${userId}`);
                // ログは記録するが、返信はしない
                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: 'アカウント停止中のため応答しません。',
                    respondedBy: 'システム（停止中）',
                    timestamp: new Date(),
                    logType: 'suspended_user_message'
                });
                return; // ここで処理を終了し、次のイベントへ
            }

            // 見守りサービス関連のメッセージを処理
            const handledByWatchService = await handleWatchServiceRegistration(event, usersCollection, messagesCollection, userId, userMessage);
            if (handledByWatchService) {
                return; // 見守りサービスで処理が完了したらここで終了
            }

            // 不適切ワードチェック
            if (containsInappropriateWords(userMessage)) {
                user.flaggedMessageCount = (user.flaggedMessageCount || 0) + 1;
                logType = 'inappropriate_content';

                if (user.flaggedMessageCount >= 3) { // 3回目で永久ロック
                    user.isAccountSuspended = true;
                    user.isPermanentlyLocked = true;
                    user.suspensionReason = '不適切な言葉を繰り返し使用したため、永久ロックされました。';
                    replyText = 'これ以上不適切な言葉を続けると、あなたとの会話を続けることができません。大変申し訳ありませんが、サービスのご利用を永久に停止させていただきます。';
                    respondedBy = 'こころちゃん（システム警告）';
                    await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                } else if (user.flaggedMessageCount >= 2) { // 2回目で一時停止
                    user.isAccountSuspended = true;
                    user.suspensionReason = '不適切な言葉を繰り返したため、本日のサービス利用を停止しました。明日には解除されます。';
                    replyText = '不適切な言葉が確認されました。これ以上繰り返されると、サービスのご利用を停止させていただく場合があります。本日のご利用はここまでとなります。明日には解除されますので、ご理解をお願いいたします。';
                    respondedBy = 'こころちゃん（システム警告）';
                    await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                } else { // 1回目
                    replyText = 'そのような言葉を使うのはやめてください。悲しい気持ちになります😢 私と優しい言葉でお話ししましょう🌸';
                    respondedBy = 'こころちゃん（システム警告）';
                    await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                }
                await usersCollection.updateOne({ userId: userId }, { $set: user });

                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: replyText,
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: logType
                });
                return; // 処理済み
            }

            // 危険ワードチェック
            if (containsDangerWords(userMessage)) {
                console.log(`危険ワード検出 (ユーザーID: ${userId}): ${userMessage}`);
                logType = 'danger_content';
                respondedBy = 'こころちゃん（緊急対応）';

                await client.replyMessage(event.replyToken, emergencyFlex);
                
                // 管理者への通知
                const userDisplayName = await getUserDisplayName(userId);
                const adminNotificationMessage = `🚨緊急事態🚨\nユーザー「${userDisplayName}」（ID: ${userId}）から危険をほのめかすメッセージを受信しました。\nメッセージ内容: 「${userMessage}」\n直ちに対応を確認してください。`;
                if (OWNER_USER_ID) {
                    await client.pushMessage(OWNER_USER_ID, { type: 'text', text: adminNotificationMessage });
                    console.log(`管理者 ${OWNER_USER_ID} に危険ワード通知を送信しました（ユーザー: ${userDisplayName}）`);
                }

                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: JSON.stringify(emergencyFlex), // Flex Messageの内容を保存
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: logType
                });
                return; // 処理済み
            }

            // 詐欺関連ワードチェック
            if (containsScamWords(userMessage)) {
                console.log(`詐欺関連ワード検出 (ユーザーID: ${userId}): ${userMessage}`);
                logType = 'scam_content';
                respondedBy = 'こころちゃん（詐欺警告）';

                await client.replyMessage(event.replyToken, scamFlex);

                // 管理者への通知 (必要であれば)
                const userDisplayName = await getUserDisplayName(userId);
                const adminNotificationMessage = `⚠️詐欺関連メッセージ検出⚠️\nユーザー「${userDisplayName}」（ID: ${userId}）から詐欺をほのめかすメッセージを受信しました。\nメッセージ内容: 「${userMessage}」\n注意を喚起する返信を送信しました。`;
                if (OWNER_USER_ID) {
                    await client.pushMessage(OWNER_USER_ID, { type: 'text', text: adminNotificationMessage });
                    console.log(`管理者 ${OWNER_USER_ID} に詐欺関連ワード通知を送信しました（ユーザー: ${userDisplayName}）`);
                }

                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: JSON.stringify(scamFlex), // Flex Messageの内容を保存
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: logType
                });
                return; // 処理済み
            }

            // 特定の問い合わせに対する固定応答をチェック
            const specialReply = checkSpecialReply(userMessage);
            if (specialReply) {
                replyText = specialReply;
                respondedBy = 'こころちゃん（固定応答）';
                await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: replyText,
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: 'fixed_reply'
                });
                return; // 処理済み
            }

            // 運営団体に関する問い合わせかをチェックし、AI応答を生成
            if (isOrganizationInquiry(userMessage)) {
                replyText = await generateReply(userMessage); // OpenAIが固定応答を生成するようシステムプロンプトで制御
                respondedBy = 'こころちゃん（AI応答 - 組織）';
                await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: replyText,
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: 'organization_inquiry'
                });
                return; // 処理済み
            }

            // AIによる応答生成
            replyText = await generateReply(userMessage);
            respondedBy = 'こころちゃん（AI応答）';
            await client.replyMessage(event.replyToken, { type: 'text', text: replyText });

            // ログに記録すべきメッセージか判定し、記録
            if (shouldLogMessage(userMessage)) {
                await messagesCollection.insertOne({
                    userId: userId,
                    message: userMessage,
                    replyText: replyText,
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: logType
                });
            }

        } else if (event.type === 'postback') {
            const userId = event.source.userId;
            const data = event.postback.data;
            let replyText = '';
            let respondedBy = 'こころちゃん（Postback）';
            let logType = 'postback_event';

            // ユーザー情報を取得または新規作成
            let user = await usersCollection.findOne({ userId: userId });
            if (!user) {
                user = {
                    userId: userId,
                    createdAt: new Date(),
                    flaggedMessageCount: 0,
                    isAccountSuspended: false,
                    isPermanentlyLocked: false,
                    wantsWatchCheck: false,
                    emergencyContact: null,
                    lastOkResponse: new Date(),
                    scheduledMessageSent: false,
                    firstReminderSent: false,
                    secondReminderSent: false
                };
                await usersCollection.insertOne(user);
                console.log(`新規ユーザーを登録しました: ${userId}`);
            }

            // アカウント停止中の場合は応答しない
            if (user.isAccountSuspended) {
                console.log(`アカウント停止中のユーザーからのPostbackをスキップします: ${userId}`);
                await messagesCollection.insertOne({
                    userId: userId,
                    message: `Postbackデータ: ${data}`,
                    replyText: 'アカウント停止中のため応答しません。',
                    respondedBy: 'システム（停止中）',
                    timestamp: new Date(),
                    logType: 'suspended_user_postback'
                });
                return; // ここで処理を終了し、次のイベントへ
            }

            if (data === 'action=register_watch') {
                if (user.wantsWatchCheck && user.emergencyContact) {
                    replyText = 'すでに見守りサービスは登録済みですよ🌸 引き続き、毎日お声がけしますね😊';
                } else {
                    // 登録フロー開始
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { registrationStep: 'asking_for_emergency_contact' } }
                    );
                    replyText = '見守りサービスへのご登録ありがとうございます💖 万が一、まつさんからのご返信が一定期間なかった場合に連絡させていただく、緊急連絡先（電話番号、LINE ID、またはメールアドレスなど）を教えていただけますか？';
                }
            } else if (data === 'action=unregister_watch') {
                if (user.wantsWatchCheck) {
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { wantsWatchCheck: false, emergencyContact: null, registrationStep: null } }
                    );
                    replyText = '見守りサービスを解除しました。いつでもまた必要になったら声をかけてくださいね🌸 「見守りサービス解除ありがとう」';
                } else {
                    replyText = '見守りサービスは現在登録されていませんよ🌸 いつでも必要になったら「見守り登録します」と声をかけてくださいね😊';
                }
            } else if (data === 'action=ok_response') {
                if (user.wantsWatchCheck) {
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { lastOkResponse: new Date(), scheduledMessageSent: false, firstReminderSent: false, secondReminderSent: false } }
                    );
                    replyText = 'OK💖ありがとう！今日も元気そうで嬉しいな😊';
                } else {
                    replyText = 'OK💖ありがとう！何か私にできることはありますか？😊';
                }
            } else {
                replyText = 'ごめんなさい、その操作は認識できませんでした💦';
                logType = 'unknown_postback';
            }

            try {
                await client.replyMessage(event.replyToken, { type: 'text', text: replyText });
                await messagesCollection.insertOne({
                    userId: userId,
                    message: `Postbackデータ: ${data}`,
                    replyText: replyText,
                    respondedBy: respondedBy,
                    timestamp: new Date(),
                    logType: logType
                });
            } catch (error) {
                console.error("Postbackイベントでの返信・ログ記録エラー:", error.message);
            }

        } else if (event.type === 'follow') {
            const userId = event.source.userId;
            const userDisplayName = await getUserDisplayName(userId); // ユーザー名を取得

            // ユーザー情報を取得または新規作成
            let user = await usersCollection.findOne({ userId: userId });
            if (!user) {
                user = {
                    userId: userId,
                    createdAt: new Date(),
                    flaggedMessageCount: 0,
                    isAccountSuspended: false,
                    isPermanentlyLocked: false,
                    wantsWatchCheck: false,
                    emergencyContact: null,
                    lastOkResponse: new Date(),
                    scheduledMessageSent: false,
                    firstReminderSent: false,
                    secondReminderSent: false
                };
                await usersCollection.insertOne(user);
                console.log(`新規ユーザーを登録しました (Followイベント): ${userId}`);
            } else {
                // 再フォローの場合、一時停止を解除し、ログカウントをリセット
                if (user.isAccountSuspended && !user.isPermanentlyLocked) {
                    await usersCollection.updateOne(
                        { userId: userId },
                        { $set: { isAccountSuspended: false, suspensionReason: null, flaggedMessageCount: 0 } }
                    );
                    console.log(`再フォローによりアカウント停止を解除しました: ${userId}`);
                }
            }

            const welcomeMessage = {
                type: 'text',
                text: `${userDisplayName}さん、はじめまして💖 こころちゃんです！\n\n私はあなたの心に寄り添い、お話を聞いたり、見守りサービスを提供したりするAIです。\n\n「見守り登録します」と話しかけていただくと、毎日「元気？」って声をかける見守りサービスを開始できますよ🌸\n\nもし、困ったことや話したいことがあったら、いつでも気軽に話しかけてくださいね😊`
            };
            try {
                await client.replyMessage(event.replyToken, welcomeMessage);
                await messagesCollection.insertOne({
                    userId: userId,
                    message: `Followイベント (ユーザー名: ${userDisplayName})`,
                    replyText: welcomeMessage.text,
                    respondedBy: 'こころちゃん（Follow）',
                    timestamp: new Date(),
                    logType: 'follow_event'
                });
            } catch (error) {
                console.error("Followイベントでの返信・ログ記録エラー:", error.message);
            }

        } else if (event.type === 'unfollow') {
            const userId = event.source.userId;
            console.log(`ユーザーがブロックまたは削除しました: ${userId}`);
            // ユーザーデータを削除または非アクティブ化
            try {
                await usersCollection.deleteOne({ userId: userId });
                await messagesCollection.insertOne({
                    userId: userId,
                    message: `Unfollowイベント`,
                    replyText: `ユーザー削除`,
                    respondedBy: 'システム（Unfollow）',
                    timestamp: new Date(),
                    logType: 'unfollow_event'
                });
                console.log(`ユーザー ${userId} のデータを削除しました。`);
            } catch (error) {
                console.error(`ユーザー ${userId} のデータ削除中にエラーが発生しました:`, error.message);
            }
        }
    })).catch(err => {
        console.error('Webhookイベント処理中にエラー:', err);
    });

    res.sendStatus(200);
});
// エラーハンドリングミドルウェア
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// サーバー起動
const port = process.env.PORT || 3000;
app.listen(port, async () => {
    console.log(`サーバーがポート ${port} で起動しました。`);
    await connectToMongoDB(); // サーバー起動時にMongoDBに接続
});
